* LES DIRECTIONS à traiter

** Absolute
N = North
S = South
E = East
O = Ouest

** Relative
F = front
B = back
L = on my left
R = on my right


* LES TOUCHES
- les lettres a,...,z
- les chiffres 0...9
- SPACE, ENTER,
- les flêches: FU, FD, FR, FL


* LES ENTITÉS

V = Void
T = Team = une entité de mon équipe 				//????
E = un Ennemi 							//???? pou 1 joueur ???
D = un Danger
P = un élément qu on peut prendre,stocker,lancer,déposer
J = un élément sur lequel on peut sauter


* LES CONDITIONS à traiter

** Les conditions booléennes de base
  True 								//ok 
  Key(Touche) : la Touche est enfoncé  				//????
  MyDir(Direction) : entité est orientée dans la Direction  //a faire
  Cell(Direction, Entité) : La cellule dans la Direction contient une Entité 	//a faire
  Closest(Entité, Direction) : la plus proche Entité est dans la Direction //a faire dans un ray de 5 cases

** Les opérateurs sur les conditions 				//je vois
  - conjonction: Condition1 & Condition2
  - disjunction: Condition1 / condition2
  - negation:  not(Condition)


* LES ACTIONS à traiter

** Les actions peuvent avoir ou non une direction.

- Si dans votre jeu une action Wizz n'a pas de direction.
alors vous interpréterait Wizz(U) comme Wizz. 			//ok mais comment on fait ?

- Si, au contraire, l'action Wizz doit avoir une direction
et que l'automate n'en donne pas. Vous intpreterez
Wizz comme Wizz(F).

** Deux actions essentielles pour votre jeu (direction optionnelle, par défaut F)
  Wizz(Direction) = ?
  Pop(Direction)  = ?

** Déplacements (direction optionnelle, par défaut F)
  Move(Direction) = déplacement
  Jump(Direction) = saut

** Rotation (direction optionnelle, par défaut R) 
  Turn(Direction) = changement de direction (sans déplacement)
  Example:
    - Turn(R) = +90 degree : clockwise
    - Turn(B) = 180 degree
    - Turn(L) = -90 degree : counter-clockwise

** Affrontements (direction optionnelle, par défaut F)
  Hit(Direction) = frapper
  Protect(Direction) = protection

** Collecte (direction optionnelle, par défaut F)
  Pick(Direction) = ramasser une chose
  Throw(Direction) = lancer/déposer ce que l entité a dans la main.

** Stockage (action sans argument)
  Store = mettre en réserve (dans son sac)
  Get   = prendre une entité dans sa réserve si aucune en main,
        changer d entité si une en main (elle est remise dans le sac)

** Power (action sans argument)
  Power = pas d'action, mais récupération d'énergie.
  Kamikaze   =  disparition, suicide, explosion, tranformation en autre chose, ...



* DES EXAMPLES D'AUTOMATES qui doivent fonctionner dans votre logiciel'

Kamikaze(Init){
  * (Init): True ? Kamikaze :(Init)
}

Philosopher(Think){
  * (Think)
}

Blocker(Init){
  * (Init): Not(True) ? Power :(Init)
}

Mover(Init){
  * (Init): True ? Move :(Init)
}

Popper(Init){
  * (Init): True ? Pop :(Init)
}

Wizzer(Init){
  * (Init): True ? Wizz :(Init)
}

Turner(Turn_0){
  * (Turn_0): True ? Turn(R) :(Turn_1)
  * (Turn_1): True ? Turn(R) :(Turn_2)
  * (Turn_2): True ? Turn(R) :(Turn_3)
  * (Turn_3): True ? Turn(R) :(Turn_4)
  * (Turn_4): True ? Kamikaze :(X)
}

Master(Think){
 * (Think_0): True ? Power :(Think_1)
 * (Think_1): True ? Power :(Think_2)
 * (Think_2): True ? Power :(Think_3)
 * (Think_3): True ? Power :(Think_4)
 * (Think_4): True ? Power :(Happy_0)

 * (Happy_0): True ? Power :(Happy_1)
 * (Happy_1): True ? Power :(Happy_2)
 * (Happy_2): True ? Power :(Happy_3)
 * (Happy_3): True ? Power :(Happy_4)
 * (Happy_4): True ? Power :(Happy_5)

 * (Happy_5): True ? Kamikaze   :(X)
}


Explorer(Explore_R){

* (Explore_R):
  | Cell(F,V) ? Move    :(Explore_R)
  | Cell(R,V) ? Turn(R) :(Explore_R)
  | Cell(L,V) ? Turn(L) :(Explore_R)
  | True ? Turn(B) :(Explore_L)

* (Explore_L):
    | Cell(F,V) ? Move    :(Explore_L)
    | Cell(L,V) ? Turn(L) :(Explore-L)
    | Cell(R,V) ? Turn(R) :(Explore_L)
    | True ? Turn(B) :(Explore_R)
}


SuperHero(Explore){

* (Explore):
  | Cell(F,P) ? Pick    :(Happy)
  | Cell(F,V) ? Move(F) :(Run)
  | Cell(F,J) ? Jump    :(Explore)
  | True ? Turn(L)      :(Explore)

* (Run):
  | Cell(F,V) ? Move(F) :(Explore)
  | Cell(F,E) / Cell(B,E) / Cell(L,E) / Cell(R,E) ? Wizz :(Escape)
  | True ? Pop :(Explore)

* (Escape):
  | Cell(F,E) & Cell(B,V) ? Move(B) :(Escape)
  | Cell(B,E) & Cell(F,V) ? Move(F) :(Escape)
  | Cell(R,E) & Cell(L,V) ? Move(L) :(Escape)
  | Cell(L,E) & Cell(R,V) ? Move(R) :(Escape)
  | Cell(F,E) & not(Cell(B,V)) ? Hit :(Fight)
  | True ? :(Explore)

* (Fight):
  | Cell(F,E) & Cell(L,E) & not(Cell(R,V) / Cell(B,V)) ? Hit :(Angry)
  | Cell(F,E) & Cell(R,E) & not(Cell(L,V) / Cell(B,V)) ? Hit :(Angry)
  | Cell(F,E) & Cell(B,E) & not(Cell(L,V) / Cell(R,V)) ? Hit :(Angry)
  | Cell(L,E) & Cell(R,E) & not(Cell(F,V) / Cell(B,V)) ? Turn(R) :(Angry)
  | True ? Pop :(Escape)

* (Angry):
  | GotPower ? Hit          :(Angry_11)
  | Not(GotPower) ? Protect :(Angry_11)

* (Angry_11): True ? Turn(B) :(Angry_12)

* (Angry_12):
  | GotPower ? Hit
  | Not(GotPower) ? Protect
  :(Angry_13)

* (Angry_13): True ? Turn(R) :(Angry_14)
* (Angry_14):
  | GotPower ? Hit
  | Not(GotPower) ? Protect
  :(Angry_15)

* (Angry_16): True ? Turn(B) :(Angry_17)
* (Angry_17):
  | GotPower ? Hit
  | Not(GotPower) ? Protect
  :(Angry_18)

* (Angry_18): True ? Turn(R) :(Rest)

* (Rest):
  | Cell(F,V) & Cell(B,V) & Cell(L,V) & Cell(R,V) ? Power : (Rest)
  | True ? Power :(Run)

* (Happy):
| Cell(F,P) ? Pick :(Happy_2)
| Cell(B,P) ? Turn(B) :(Happy)
| Cell(L,P) ? Turn(L) :(Happy)
| Cell(R,P) ? Turn(R) :(Happy)
| True ? Turn(A) :(Explore)

*(Happy): True ? Store :(Crazy)

* (Crazy)  : True ? Get     :(Crazy_1)
* (Crazy_1): True ? Get     :(Crazy_2)
* (Crazy_2): True ? Turn(B) :(Crazy_3)
* (Crazy_3): True ? Throw   :(Think)

* (Think):
  | Cell(F,J) ? Jump    :(Build)
  | Cell(B,J) ? Turn(B) :(Think)
  | Cell(L,J) ? Turn(L) :(Think)
  | Cell(R,J) ? Turn(R) :(Think)

* (Build):
  | GotStuff ? Get : (Build_1)
  | True ? Wizz :(Explore)

* (Build_1): True ? Throw :(Build)
}



* OPTIONNEL

** LES HUMEURS

***  Les noms des états peuvent correspond à des humeurs

Ils peuvent être exploiter dans le jeu
pour adapter la représentation graphique du personnage à son comportement.

  Exemple: l'automate d'un guerrier pourrait avoir des états
    Chase_1, Chase_2, formé du nom d'une humeur suivie de _ et d'un identifiant
    Ils seront associés à l'humeur Chase et déclencheront une modification de l'apparence du personnage.

***  Les 10 humeurs
  Think, Build,
  Fight, Escape,
  Explore, Run,
  Angry, Crazy,
  Happy, Rest.


** Trois extensions pour écrire les automates plus facilement

*** Deux formes de non-déterminisme

  Lorsque sa condition est vraie, une transition
  "*(Etat1): Condition ? Action1 / Action2 :(Etat2)"
  tire au sort l'action à effectuer parmi Action1 et Action2.

  Une transition avec pour état cible (_)
  Par exemple, "*(Etat): Condition ? Action :(_)""
  saute dans n'importe quel état de l'automate.

*** Appel de procedure avec fin de l'exécution sur l'état ()

On distingue un état () qui représente la fin d'exécution de l'automate.
Le principe: une transtion "*(état): Condition ? Action :[ AUT(ETAT) ]"

  fait sauter dans l'automate AUT à l'état ETAT.
  Le retour dans l'automate d'origine a lieu lorsqu'une transition
  de l'automate AUT atteint l'état ().

*** Les variables

Les conditions et les actions peuvent utiliser les variables "d"
pour direction et "e" pour entité.

Une transition

* (State): Cell(d,V) ? Move(d) :(State)

est équivalente à

* (State): Cell(N,V) ? Move(N) :(State)
* (State): Cell(S,V) ? Move(S) :(State)
* (State): Cell(O,V) ? Move(O) :(State)
* (State): Cell(E,V) ? Move(E) :(State)
